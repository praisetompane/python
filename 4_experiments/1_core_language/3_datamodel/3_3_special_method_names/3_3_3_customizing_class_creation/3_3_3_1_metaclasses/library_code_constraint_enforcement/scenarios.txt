two teams:
    - library: infrastructure code for reuse by other engineers
    - user: code used to build software for users

issues:    
    - library code needs to enforce that user code implements the necessary interface
        solutions:
            1. Wrap invocation in Exception handling
                try:
                    return self.abstract_method()
                except Exception: print("handle")
                
                Assessment: Not Preferred. Only fails at runtime.
 
            2. __build_class__
                Take advantage of the fact that Python is Protocol Orientated. Use __build_class__
                    NB: All statements (except 2) in Python are runtime executable.
                    Example:
                        1. This runs
                            for _ in range(10):
                                class Bar: pass
                        2. class Test:
                            for _ range(10):
                                def foo():
                                    pass
                                    
                Assessment: Not Preferred.

            3. metaclasses
                - example: What Does It Take To Be An Expert At Python/metaclasses/library_code_constraint_enforcement/metaclasses

                Assessment: Preferred.

            4. __init_subclass__
                Assessment: Preferred.

References:
    Powell, J. 2017. What Does It Take To Be An Expert At Python. PyData